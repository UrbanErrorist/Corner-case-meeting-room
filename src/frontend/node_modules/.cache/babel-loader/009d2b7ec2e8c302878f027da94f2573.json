{"ast":null,"code":"'use strict';\n/**\n * Local dependencies\n */\n\nvar utils = require('./common/utils');\n\nvar rules = require('./rules');\n/**\n * Expose `Renderer`\n */\n\n\nmodule.exports = Renderer;\n/**\n * Renderer class. Renders HTML and exposes `rules` to allow\n * local modifications.\n */\n\nfunction Renderer() {\n  this.rules = utils.assign({}, rules); // exported helper, for custom rules only\n\n  this.getBreak = rules.getBreak;\n}\n/**\n * Render a string of inline HTML with the given `tokens` and\n * `options`.\n *\n * @param  {Array} `tokens`\n * @param  {Object} `options`\n * @param  {Object} `env`\n * @return {String}\n * @api public\n */\n\n\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var _rules = this.rules;\n  var len = tokens.length,\n      i = 0;\n  var result = '';\n\n  while (len--) {\n    result += _rules[tokens[i].type](tokens, i++, options, env, this);\n  }\n\n  return result;\n};\n/**\n * Render a string of HTML with the given `tokens` and\n * `options`.\n *\n * @param  {Array} `tokens`\n * @param  {Object} `options`\n * @param  {Object} `env`\n * @return {String}\n * @api public\n */\n\n\nRenderer.prototype.render = function (tokens, options, env) {\n  var _rules = this.rules;\n  var len = tokens.length,\n      i = -1;\n  var result = '';\n\n  while (++i < len) {\n    if (tokens[i].type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else {\n      result += _rules[tokens[i].type](tokens, i, options, env, this);\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/blackhat/TV Shows/Meeting Room/src/frontend/node_modules/remarkable/lib/renderer.js"],"names":["utils","require","rules","module","exports","Renderer","assign","getBreak","prototype","renderInline","tokens","options","env","_rules","len","length","i","result","type","render","children"],"mappings":"AAAA;AAEA;;;;AAIA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;;AAIAE,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA;;;;;AAKA,SAASA,QAAT,GAAoB;AAClB,OAAKH,KAAL,GAAaF,KAAK,CAACM,MAAN,CAAa,EAAb,EAAiBJ,KAAjB,CAAb,CADkB,CAGlB;;AACA,OAAKK,QAAL,GAAgBL,KAAK,CAACK,QAAtB;AACD;AAED;;;;;;;;;;;;AAWAF,QAAQ,CAACG,SAAT,CAAmBC,YAAnB,GAAkC,UAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgC;AAChE,MAAIC,MAAM,GAAG,KAAKX,KAAlB;AACA,MAAIY,GAAG,GAAGJ,MAAM,CAACK,MAAjB;AAAA,MAAyBC,CAAC,GAAG,CAA7B;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAOH,GAAG,EAAV,EAAc;AACZG,IAAAA,MAAM,IAAIJ,MAAM,CAACH,MAAM,CAACM,CAAD,CAAN,CAAUE,IAAX,CAAN,CAAuBR,MAAvB,EAA+BM,CAAC,EAAhC,EAAoCL,OAApC,EAA6CC,GAA7C,EAAkD,IAAlD,CAAV;AACD;;AAED,SAAOK,MAAP;AACD,CAVD;AAYA;;;;;;;;;;;;AAWAZ,QAAQ,CAACG,SAAT,CAAmBW,MAAnB,GAA4B,UAAUT,MAAV,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgC;AAC1D,MAAIC,MAAM,GAAG,KAAKX,KAAlB;AACA,MAAIY,GAAG,GAAGJ,MAAM,CAACK,MAAjB;AAAA,MAAyBC,CAAC,GAAG,CAAC,CAA9B;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAO,EAAED,CAAF,GAAMF,GAAb,EAAkB;AAChB,QAAIJ,MAAM,CAACM,CAAD,CAAN,CAAUE,IAAV,KAAmB,QAAvB,EAAiC;AAC/BD,MAAAA,MAAM,IAAI,KAAKR,YAAL,CAAkBC,MAAM,CAACM,CAAD,CAAN,CAAUI,QAA5B,EAAsCT,OAAtC,EAA+CC,GAA/C,CAAV;AACD,KAFD,MAEO;AACLK,MAAAA,MAAM,IAAIJ,MAAM,CAACH,MAAM,CAACM,CAAD,CAAN,CAAUE,IAAX,CAAN,CAAuBR,MAAvB,EAA+BM,CAA/B,EAAkCL,OAAlC,EAA2CC,GAA3C,EAAgD,IAAhD,CAAV;AACD;AACF;;AACD,SAAOK,MAAP;AACD,CAbD","sourcesContent":["'use strict';\n\n/**\n * Local dependencies\n */\n\nvar utils = require('./common/utils');\nvar rules = require('./rules');\n\n/**\n * Expose `Renderer`\n */\n\nmodule.exports = Renderer;\n\n/**\n * Renderer class. Renders HTML and exposes `rules` to allow\n * local modifications.\n */\n\nfunction Renderer() {\n  this.rules = utils.assign({}, rules);\n\n  // exported helper, for custom rules only\n  this.getBreak = rules.getBreak;\n}\n\n/**\n * Render a string of inline HTML with the given `tokens` and\n * `options`.\n *\n * @param  {Array} `tokens`\n * @param  {Object} `options`\n * @param  {Object} `env`\n * @return {String}\n * @api public\n */\n\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var _rules = this.rules;\n  var len = tokens.length, i = 0;\n  var result = '';\n\n  while (len--) {\n    result += _rules[tokens[i].type](tokens, i++, options, env, this);\n  }\n\n  return result;\n};\n\n/**\n * Render a string of HTML with the given `tokens` and\n * `options`.\n *\n * @param  {Array} `tokens`\n * @param  {Object} `options`\n * @param  {Object} `env`\n * @return {String}\n * @api public\n */\n\nRenderer.prototype.render = function (tokens, options, env) {\n  var _rules = this.rules;\n  var len = tokens.length, i = -1;\n  var result = '';\n\n  while (++i < len) {\n    if (tokens[i].type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else {\n      result += _rules[tokens[i].type](tokens, i, options, env, this);\n    }\n  }\n  return result;\n};\n"]},"metadata":{},"sourceType":"script"}
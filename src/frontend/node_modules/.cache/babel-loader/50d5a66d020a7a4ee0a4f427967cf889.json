{"ast":null,"code":"\"use strict\";\n\nvar callable = require(\"es5-ext/object/valid-callable\"),\n    forEach = require(\"es5-ext/object/for-each\"),\n    extensions = require(\"./lib/registered-extensions\"),\n    configure = require(\"./lib/configure-map\"),\n    resolveLength = require(\"./lib/resolve-length\");\n\nmodule.exports = function self(fn\n/*, options */\n) {\n  var options, length, conf;\n  callable(fn);\n  options = Object(arguments[1]);\n\n  if (options.async && options.promise) {\n    throw new Error(\"Options 'async' and 'promise' cannot be used together\");\n  } // Do not memoize already memoized function\n\n\n  if (hasOwnProperty.call(fn, \"__memoized__\") && !options.force) return fn; // Resolve length;\n\n  length = resolveLength(options.length, fn.length, options.async && extensions.async); // Configure cache map\n\n  conf = configure(fn, length, options); // Bind eventual extensions\n\n  forEach(extensions, function (extFn, name) {\n    if (options[name]) extFn(options[name], conf, options);\n  });\n  if (self.__profiler__) self.__profiler__(conf);\n  conf.updateEnv();\n  return conf.memoized;\n};","map":{"version":3,"sources":["/Users/blackhat/TV Shows/Meeting Room/src/frontend/node_modules/memoizee/plain.js"],"names":["callable","require","forEach","extensions","configure","resolveLength","module","exports","self","fn","options","length","conf","Object","arguments","async","promise","Error","hasOwnProperty","call","force","extFn","name","__profiler__","updateEnv","memoized"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAQC,OAAO,CAAC,+BAAD,CAA3B;AAAA,IACIC,OAAO,GAASD,OAAO,CAAC,yBAAD,CAD3B;AAAA,IAEIE,UAAU,GAAMF,OAAO,CAAC,6BAAD,CAF3B;AAAA,IAGIG,SAAS,GAAOH,OAAO,CAAC,qBAAD,CAH3B;AAAA,IAIII,aAAa,GAAGJ,OAAO,CAAC,sBAAD,CAJ3B;;AAMAK,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC;AAAG;AAAjB,EAAiC;AACjD,MAAIC,OAAJ,EAAaC,MAAb,EAAqBC,IAArB;AAEAZ,EAAAA,QAAQ,CAACS,EAAD,CAAR;AACAC,EAAAA,OAAO,GAAGG,MAAM,CAACC,SAAS,CAAC,CAAD,CAAV,CAAhB;;AAEA,MAAIJ,OAAO,CAACK,KAAR,IAAiBL,OAAO,CAACM,OAA7B,EAAsC;AACrC,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACA,GARgD,CAUjD;;;AACA,MAAIC,cAAc,CAACC,IAAf,CAAoBV,EAApB,EAAwB,cAAxB,KAA2C,CAACC,OAAO,CAACU,KAAxD,EAA+D,OAAOX,EAAP,CAXd,CAajD;;AACAE,EAAAA,MAAM,GAAGN,aAAa,CAACK,OAAO,CAACC,MAAT,EAAiBF,EAAE,CAACE,MAApB,EAA4BD,OAAO,CAACK,KAAR,IAAiBZ,UAAU,CAACY,KAAxD,CAAtB,CAdiD,CAgBjD;;AACAH,EAAAA,IAAI,GAAGR,SAAS,CAACK,EAAD,EAAKE,MAAL,EAAaD,OAAb,CAAhB,CAjBiD,CAmBjD;;AACAR,EAAAA,OAAO,CAACC,UAAD,EAAa,UAAUkB,KAAV,EAAiBC,IAAjB,EAAuB;AAC1C,QAAIZ,OAAO,CAACY,IAAD,CAAX,EAAmBD,KAAK,CAACX,OAAO,CAACY,IAAD,CAAR,EAAgBV,IAAhB,EAAsBF,OAAtB,CAAL;AACnB,GAFM,CAAP;AAIA,MAAIF,IAAI,CAACe,YAAT,EAAuBf,IAAI,CAACe,YAAL,CAAkBX,IAAlB;AAEvBA,EAAAA,IAAI,CAACY,SAAL;AACA,SAAOZ,IAAI,CAACa,QAAZ;AACA,CA5BD","sourcesContent":["\"use strict\";\n\nvar callable      = require(\"es5-ext/object/valid-callable\")\n  , forEach       = require(\"es5-ext/object/for-each\")\n  , extensions    = require(\"./lib/registered-extensions\")\n  , configure     = require(\"./lib/configure-map\")\n  , resolveLength = require(\"./lib/resolve-length\");\n\nmodule.exports = function self(fn /*, options */) {\n\tvar options, length, conf;\n\n\tcallable(fn);\n\toptions = Object(arguments[1]);\n\n\tif (options.async && options.promise) {\n\t\tthrow new Error(\"Options 'async' and 'promise' cannot be used together\");\n\t}\n\n\t// Do not memoize already memoized function\n\tif (hasOwnProperty.call(fn, \"__memoized__\") && !options.force) return fn;\n\n\t// Resolve length;\n\tlength = resolveLength(options.length, fn.length, options.async && extensions.async);\n\n\t// Configure cache map\n\tconf = configure(fn, length, options);\n\n\t// Bind eventual extensions\n\tforEach(extensions, function (extFn, name) {\n\t\tif (options[name]) extFn(options[name], conf, options);\n\t});\n\n\tif (self.__profiler__) self.__profiler__(conf);\n\n\tconf.updateEnv();\n\treturn conf.memoized;\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"// Enclose abbreviations in <abbr> tags\n//\n'use strict';\n\nvar PUNCT_CHARS = ' \\n()[]\\'\".,!?-'; // from Google closure library\n// http://closure-library.googlecode.com/git-history/docs/local_closure_goog_string_string.js.source.html#line1021\n\nfunction regEscape(s) {\n  return s.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1');\n}\n\nmodule.exports = function abbr2(state) {\n  var i,\n      j,\n      l,\n      tokens,\n      token,\n      text,\n      nodes,\n      pos,\n      level,\n      reg,\n      m,\n      regText,\n      blockTokens = state.tokens;\n\n  if (!state.env.abbreviations) {\n    return;\n  }\n\n  if (!state.env.abbrRegExp) {\n    regText = '(^|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])' + '(' + Object.keys(state.env.abbreviations).map(function (x) {\n      return x.substr(1);\n    }).sort(function (a, b) {\n      return b.length - a.length;\n    }).map(regEscape).join('|') + ')' + '($|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])';\n    state.env.abbrRegExp = new RegExp(regText, 'g');\n  }\n\n  reg = state.env.abbrRegExp;\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') {\n      continue;\n    }\n\n    tokens = blockTokens[j].children; // We scan from the end, to keep position when new tags added.\n\n    for (i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i];\n\n      if (token.type !== 'text') {\n        continue;\n      }\n\n      pos = 0;\n      text = token.content;\n      reg.lastIndex = 0;\n      level = token.level;\n      nodes = [];\n\n      while (m = reg.exec(text)) {\n        if (reg.lastIndex > pos) {\n          nodes.push({\n            type: 'text',\n            content: text.slice(pos, m.index + m[1].length),\n            level: level\n          });\n        }\n\n        nodes.push({\n          type: 'abbr_open',\n          title: state.env.abbreviations[':' + m[2]],\n          level: level++\n        });\n        nodes.push({\n          type: 'text',\n          content: m[2],\n          level: level\n        });\n        nodes.push({\n          type: 'abbr_close',\n          level: --level\n        });\n        pos = reg.lastIndex - m[3].length;\n      }\n\n      if (!nodes.length) {\n        continue;\n      }\n\n      if (pos < text.length) {\n        nodes.push({\n          type: 'text',\n          content: text.slice(pos),\n          level: level\n        });\n      } // replace current node\n\n\n      blockTokens[j].children = tokens = [].concat(tokens.slice(0, i), nodes, tokens.slice(i + 1));\n    }\n  }\n};","map":{"version":3,"sources":["/Users/blackhat/TV Shows/Meeting Room/src/frontend/node_modules/remarkable/lib/rules_core/abbr2.js"],"names":["PUNCT_CHARS","regEscape","s","replace","module","exports","abbr2","state","i","j","l","tokens","token","text","nodes","pos","level","reg","m","regText","blockTokens","env","abbreviations","abbrRegExp","split","map","join","Object","keys","x","substr","sort","a","b","length","RegExp","type","children","content","lastIndex","exec","push","slice","index","title","concat"],"mappings":"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","sourcesContent":["// Enclose abbreviations in <abbr> tags\n//\n'use strict';\n\n\nvar PUNCT_CHARS = ' \\n()[]\\'\".,!?-';\n\n\n// from Google closure library\n// http://closure-library.googlecode.com/git-history/docs/local_closure_goog_string_string.js.source.html#line1021\nfunction regEscape(s) {\n  return s.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1');\n}\n\n\nmodule.exports = function abbr2(state) {\n  var i, j, l, tokens, token, text, nodes, pos, level, reg, m, regText,\n      blockTokens = state.tokens;\n\n  if (!state.env.abbreviations) { return; }\n  if (!state.env.abbrRegExp) {\n    regText = '(^|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])'\n            + '(' + Object.keys(state.env.abbreviations).map(function (x) {\n                      return x.substr(1);\n                    }).sort(function (a, b) {\n                      return b.length - a.length;\n                    }).map(regEscape).join('|') + ')'\n            + '($|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])';\n    state.env.abbrRegExp = new RegExp(regText, 'g');\n  }\n  reg = state.env.abbrRegExp;\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') { continue; }\n    tokens = blockTokens[j].children;\n\n    // We scan from the end, to keep position when new tags added.\n    for (i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i];\n      if (token.type !== 'text') { continue; }\n\n      pos = 0;\n      text = token.content;\n      reg.lastIndex = 0;\n      level = token.level;\n      nodes = [];\n\n      while ((m = reg.exec(text))) {\n        if (reg.lastIndex > pos) {\n          nodes.push({\n            type: 'text',\n            content: text.slice(pos, m.index + m[1].length),\n            level: level\n          });\n        }\n\n        nodes.push({\n          type: 'abbr_open',\n          title: state.env.abbreviations[':' + m[2]],\n          level: level++\n        });\n        nodes.push({\n          type: 'text',\n          content: m[2],\n          level: level\n        });\n        nodes.push({\n          type: 'abbr_close',\n          level: --level\n        });\n        pos = reg.lastIndex - m[3].length;\n      }\n\n      if (!nodes.length) { continue; }\n\n      if (pos < text.length) {\n        nodes.push({\n          type: 'text',\n          content: text.slice(pos),\n          level: level\n        });\n      }\n\n      // replace current node\n      blockTokens[j].children = tokens = [].concat(tokens.slice(0, i), nodes, tokens.slice(i + 1));\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
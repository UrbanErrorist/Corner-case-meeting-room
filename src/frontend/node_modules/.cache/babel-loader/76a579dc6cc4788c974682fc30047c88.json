{"ast":null,"code":"// heading (#, ##, ...)\n'use strict';\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch,\n      level,\n      tmp,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  if (pos >= max) {\n    return false;\n  }\n\n  ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23\n  /* # */\n  || pos >= max) {\n    return false;\n  } // count heading level\n\n\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n\n  while (ch === 0x23\n  /* # */\n  && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || pos < max && ch !== 0x20\n  /* space */\n  ) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  } // Let's cut tails like '    ###  ' from the end of string\n\n\n  max = state.skipCharsBack(max, 0x20, pos); // space\n\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n\n  if (tmp > pos && state.src.charCodeAt(tmp - 1) === 0x20\n  /* space */\n  ) {\n      max = tmp;\n    }\n\n  state.line = startLine + 1;\n  state.tokens.push({\n    type: 'heading_open',\n    hLevel: level,\n    lines: [startLine, state.line],\n    level: state.level\n  }); // only if header is not empty\n\n  if (pos < max) {\n    state.tokens.push({\n      type: 'inline',\n      content: state.src.slice(pos, max).trim(),\n      level: state.level + 1,\n      lines: [startLine, state.line],\n      children: []\n    });\n  }\n\n  state.tokens.push({\n    type: 'heading_close',\n    hLevel: level,\n    level: state.level\n  });\n  return true;\n};","map":{"version":3,"sources":["/Users/blackhat/Desktop/testingRoom/src/frontend/node_modules/remarkable/lib/rules_block/heading.js"],"names":["module","exports","heading","state","startLine","endLine","silent","ch","level","tmp","pos","bMarks","tShift","max","eMarks","src","charCodeAt","skipCharsBack","line","tokens","push","type","hLevel","lines","content","slice","trim","children"],"mappings":"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","sourcesContent":["// heading (#, ##, ...)\n\n'use strict';\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  if (pos >= max) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && ch !== 0x20/* space */)) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipCharsBack(max, 0x20, pos); // space\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && state.src.charCodeAt(tmp - 1) === 0x20/* space */) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  state.tokens.push({ type: 'heading_open',\n    hLevel: level,\n    lines: [ startLine, state.line ],\n    level: state.level\n  });\n\n  // only if header is not empty\n  if (pos < max) {\n    state.tokens.push({\n      type: 'inline',\n      content: state.src.slice(pos, max).trim(),\n      level: state.level + 1,\n      lines: [ startLine, state.line ],\n      children: []\n    });\n  }\n  state.tokens.push({ type: 'heading_close', hLevel: level, level: state.level });\n\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"// GFM table, non-standard\n'use strict';\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n  return state.src.substr(pos, max - pos);\n}\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, rows, cell, aligns, t, tableLines, tbodyLines; // should have at least three lines\n\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n\n  nextLine = startLine + 1;\n\n  if (state.tShift[nextLine] < state.blkIndent) {\n    return false;\n  } // first character of the second line should be '|' or '-'\n\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n\n  ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x7C\n  /* | */\n  && ch !== 0x2D\n  /* - */\n  && ch !== 0x3A\n  /* : */\n  ) {\n      return false;\n    }\n\n  lineText = getLine(state, startLine + 1);\n\n  if (!/^[-:| ]+$/.test(lineText)) {\n    return false;\n  }\n\n  rows = lineText.split('|');\n\n  if (rows <= 2) {\n    return false;\n  }\n\n  aligns = [];\n\n  for (i = 0; i < rows.length; i++) {\n    t = rows[i].trim();\n\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === rows.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n\n    if (t.charCodeAt(t.length - 1) === 0x3A\n    /* : */\n    ) {\n        aligns.push(t.charCodeAt(0) === 0x3A\n        /* : */\n        ? 'center' : 'right');\n      } else if (t.charCodeAt(0) === 0x3A\n    /* : */\n    ) {\n        aligns.push('left');\n      } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n\n  if (lineText.indexOf('|') === -1) {\n    return false;\n  }\n\n  rows = lineText.replace(/^\\||\\|$/g, '').split('|');\n\n  if (aligns.length !== rows.length) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  state.tokens.push({\n    type: 'table_open',\n    lines: tableLines = [startLine, 0],\n    level: state.level++\n  });\n  state.tokens.push({\n    type: 'thead_open',\n    lines: [startLine, startLine + 1],\n    level: state.level++\n  });\n  state.tokens.push({\n    type: 'tr_open',\n    lines: [startLine, startLine + 1],\n    level: state.level++\n  });\n\n  for (i = 0; i < rows.length; i++) {\n    state.tokens.push({\n      type: 'th_open',\n      align: aligns[i],\n      lines: [startLine, startLine + 1],\n      level: state.level++\n    });\n    state.tokens.push({\n      type: 'inline',\n      content: rows[i].trim(),\n      lines: [startLine, startLine + 1],\n      level: state.level,\n      children: []\n    });\n    state.tokens.push({\n      type: 'th_close',\n      level: --state.level\n    });\n  }\n\n  state.tokens.push({\n    type: 'tr_close',\n    level: --state.level\n  });\n  state.tokens.push({\n    type: 'thead_close',\n    level: --state.level\n  });\n  state.tokens.push({\n    type: 'tbody_open',\n    lines: tbodyLines = [startLine + 2, 0],\n    level: state.level++\n  });\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.tShift[nextLine] < state.blkIndent) {\n      break;\n    }\n\n    lineText = getLine(state, nextLine).trim();\n\n    if (lineText.indexOf('|') === -1) {\n      break;\n    }\n\n    rows = lineText.replace(/^\\||\\|$/g, '').split('|');\n    state.tokens.push({\n      type: 'tr_open',\n      level: state.level++\n    });\n\n    for (i = 0; i < rows.length; i++) {\n      state.tokens.push({\n        type: 'td_open',\n        align: aligns[i],\n        level: state.level++\n      }); // 0x7c === '|'\n\n      cell = rows[i].substring(rows[i].charCodeAt(0) === 0x7c ? 1 : 0, rows[i].charCodeAt(rows[i].length - 1) === 0x7c ? rows[i].length - 1 : rows[i].length).trim();\n      state.tokens.push({\n        type: 'inline',\n        content: cell,\n        level: state.level,\n        children: []\n      });\n      state.tokens.push({\n        type: 'td_close',\n        level: --state.level\n      });\n    }\n\n    state.tokens.push({\n      type: 'tr_close',\n      level: --state.level\n    });\n  }\n\n  state.tokens.push({\n    type: 'tbody_close',\n    level: --state.level\n  });\n  state.tokens.push({\n    type: 'table_close',\n    level: --state.level\n  });\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};","map":{"version":3,"sources":["/Users/blackhat/TV Shows/Meeting Room/src/frontend/node_modules/remarkable/lib/rules_block/table.js"],"names":["getLine","state","line","pos","bMarks","blkIndent","max","eMarks","src","substr","module","exports","table","startLine","endLine","silent","ch","lineText","i","nextLine","rows","cell","aligns","t","tableLines","tbodyLines","tShift","charCodeAt","test","split","length","trim","push","indexOf","replace","tokens","type","lines","level","align","content","children","substring"],"mappings":"AAAA;AAEA;;AAGA,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;AAC5B,MAAIC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAaF,IAAb,IAAqBD,KAAK,CAACI,SAArC;AAAA,MACIC,GAAG,GAAGL,KAAK,CAACM,MAAN,CAAaL,IAAb,CADV;AAGA,SAAOD,KAAK,CAACO,GAAN,CAAUC,MAAV,CAAiBN,GAAjB,EAAsBG,GAAG,GAAGH,GAA5B,CAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeX,KAAf,EAAsBY,SAAtB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkD;AACjE,MAAIC,EAAJ,EAAQC,QAAR,EAAkBd,GAAlB,EAAuBe,CAAvB,EAA0BC,QAA1B,EAAoCC,IAApC,EAA0CC,IAA1C,EACIC,MADJ,EACYC,CADZ,EACeC,UADf,EAC2BC,UAD3B,CADiE,CAIjE;;AACA,MAAIZ,SAAS,GAAG,CAAZ,GAAgBC,OAApB,EAA6B;AAAE,WAAO,KAAP;AAAe;;AAE9CK,EAAAA,QAAQ,GAAGN,SAAS,GAAG,CAAvB;;AAEA,MAAIZ,KAAK,CAACyB,MAAN,CAAaP,QAAb,IAAyBlB,KAAK,CAACI,SAAnC,EAA8C;AAAE,WAAO,KAAP;AAAe,GATE,CAWjE;;;AAEAF,EAAAA,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAae,QAAb,IAAyBlB,KAAK,CAACyB,MAAN,CAAaP,QAAb,CAA/B;;AACA,MAAIhB,GAAG,IAAIF,KAAK,CAACM,MAAN,CAAaY,QAAb,CAAX,EAAmC;AAAE,WAAO,KAAP;AAAe;;AAEpDH,EAAAA,EAAE,GAAGf,KAAK,CAACO,GAAN,CAAUmB,UAAV,CAAqBxB,GAArB,CAAL;;AACA,MAAIa,EAAE,KAAK;AAAI;AAAX,KAAsBA,EAAE,KAAK;AAAI;AAAjC,KAA4CA,EAAE,KAAK;AAAI;AAA3D,IAAoE;AAAE,aAAO,KAAP;AAAe;;AAErFC,EAAAA,QAAQ,GAAGjB,OAAO,CAACC,KAAD,EAAQY,SAAS,GAAG,CAApB,CAAlB;;AACA,MAAI,CAAC,YAAYe,IAAZ,CAAiBX,QAAjB,CAAL,EAAiC;AAAE,WAAO,KAAP;AAAe;;AAElDG,EAAAA,IAAI,GAAGH,QAAQ,CAACY,KAAT,CAAe,GAAf,CAAP;;AACA,MAAIT,IAAI,IAAI,CAAZ,EAAe;AAAE,WAAO,KAAP;AAAe;;AAChCE,EAAAA,MAAM,GAAG,EAAT;;AACA,OAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGE,IAAI,CAACU,MAArB,EAA6BZ,CAAC,EAA9B,EAAkC;AAChCK,IAAAA,CAAC,GAAGH,IAAI,CAACF,CAAD,CAAJ,CAAQa,IAAR,EAAJ;;AACA,QAAI,CAACR,CAAL,EAAQ;AACN;AACA;AACA,UAAIL,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAKE,IAAI,CAACU,MAAL,GAAc,CAAnC,EAAsC;AACpC;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;AAED,QAAI,CAAC,WAAWF,IAAX,CAAgBL,CAAhB,CAAL,EAAyB;AAAE,aAAO,KAAP;AAAe;;AAC1C,QAAIA,CAAC,CAACI,UAAF,CAAaJ,CAAC,CAACO,MAAF,GAAW,CAAxB,MAA+B;AAAI;AAAvC,MAAgD;AAC9CR,QAAAA,MAAM,CAACU,IAAP,CAAYT,CAAC,CAACI,UAAF,CAAa,CAAb,MAAoB;AAAI;AAAxB,UAAkC,QAAlC,GAA6C,OAAzD;AACD,OAFD,MAEO,IAAIJ,CAAC,CAACI,UAAF,CAAa,CAAb,MAAoB;AAAI;AAA5B,MAAqC;AAC1CL,QAAAA,MAAM,CAACU,IAAP,CAAY,MAAZ;AACD,OAFM,MAEA;AACLV,MAAAA,MAAM,CAACU,IAAP,CAAY,EAAZ;AACD;AACF;;AAEDf,EAAAA,QAAQ,GAAGjB,OAAO,CAACC,KAAD,EAAQY,SAAR,CAAP,CAA0BkB,IAA1B,EAAX;;AACA,MAAId,QAAQ,CAACgB,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;AAAE,WAAO,KAAP;AAAe;;AACnDb,EAAAA,IAAI,GAAGH,QAAQ,CAACiB,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,EAAiCL,KAAjC,CAAuC,GAAvC,CAAP;;AACA,MAAIP,MAAM,CAACQ,MAAP,KAAkBV,IAAI,CAACU,MAA3B,EAAmC;AAAE,WAAO,KAAP;AAAe;;AACpD,MAAIf,MAAJ,EAAY;AAAE,WAAO,IAAP;AAAc;;AAE5Bd,EAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAChBI,IAAAA,IAAI,EAAE,YADU;AAEhBC,IAAAA,KAAK,EAAEb,UAAU,GAAG,CAAEX,SAAF,EAAa,CAAb,CAFJ;AAGhByB,IAAAA,KAAK,EAAErC,KAAK,CAACqC,KAAN;AAHS,GAAlB;AAKArC,EAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAChBI,IAAAA,IAAI,EAAE,YADU;AAEhBC,IAAAA,KAAK,EAAE,CAAExB,SAAF,EAAaA,SAAS,GAAG,CAAzB,CAFS;AAGhByB,IAAAA,KAAK,EAAErC,KAAK,CAACqC,KAAN;AAHS,GAAlB;AAMArC,EAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAChBI,IAAAA,IAAI,EAAE,SADU;AAEhBC,IAAAA,KAAK,EAAE,CAAExB,SAAF,EAAaA,SAAS,GAAG,CAAzB,CAFS;AAGhByB,IAAAA,KAAK,EAAErC,KAAK,CAACqC,KAAN;AAHS,GAAlB;;AAKA,OAAKpB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGE,IAAI,CAACU,MAArB,EAA6BZ,CAAC,EAA9B,EAAkC;AAChCjB,IAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAChBI,MAAAA,IAAI,EAAE,SADU;AAEhBG,MAAAA,KAAK,EAAEjB,MAAM,CAACJ,CAAD,CAFG;AAGhBmB,MAAAA,KAAK,EAAE,CAAExB,SAAF,EAAaA,SAAS,GAAG,CAAzB,CAHS;AAIhByB,MAAAA,KAAK,EAAErC,KAAK,CAACqC,KAAN;AAJS,KAAlB;AAMArC,IAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAChBI,MAAAA,IAAI,EAAE,QADU;AAEhBI,MAAAA,OAAO,EAAEpB,IAAI,CAACF,CAAD,CAAJ,CAAQa,IAAR,EAFO;AAGhBM,MAAAA,KAAK,EAAE,CAAExB,SAAF,EAAaA,SAAS,GAAG,CAAzB,CAHS;AAIhByB,MAAAA,KAAK,EAAErC,KAAK,CAACqC,KAJG;AAKhBG,MAAAA,QAAQ,EAAE;AALM,KAAlB;AAOAxC,IAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAAEI,MAAAA,IAAI,EAAE,UAAR;AAAoBE,MAAAA,KAAK,EAAE,EAAErC,KAAK,CAACqC;AAAnC,KAAlB;AACD;;AACDrC,EAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAAEI,IAAAA,IAAI,EAAE,UAAR;AAAoBE,IAAAA,KAAK,EAAE,EAAErC,KAAK,CAACqC;AAAnC,GAAlB;AACArC,EAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAAEI,IAAAA,IAAI,EAAE,aAAR;AAAuBE,IAAAA,KAAK,EAAE,EAAErC,KAAK,CAACqC;AAAtC,GAAlB;AAEArC,EAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAChBI,IAAAA,IAAI,EAAE,YADU;AAEhBC,IAAAA,KAAK,EAAEZ,UAAU,GAAG,CAAEZ,SAAS,GAAG,CAAd,EAAiB,CAAjB,CAFJ;AAGhByB,IAAAA,KAAK,EAAErC,KAAK,CAACqC,KAAN;AAHS,GAAlB;;AAMA,OAAKnB,QAAQ,GAAGN,SAAS,GAAG,CAA5B,EAA+BM,QAAQ,GAAGL,OAA1C,EAAmDK,QAAQ,EAA3D,EAA+D;AAC7D,QAAIlB,KAAK,CAACyB,MAAN,CAAaP,QAAb,IAAyBlB,KAAK,CAACI,SAAnC,EAA8C;AAAE;AAAQ;;AAExDY,IAAAA,QAAQ,GAAGjB,OAAO,CAACC,KAAD,EAAQkB,QAAR,CAAP,CAAyBY,IAAzB,EAAX;;AACA,QAAId,QAAQ,CAACgB,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;AAAE;AAAQ;;AAC5Cb,IAAAA,IAAI,GAAGH,QAAQ,CAACiB,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,EAAiCL,KAAjC,CAAuC,GAAvC,CAAP;AAEA5B,IAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAAEI,MAAAA,IAAI,EAAE,SAAR;AAAmBE,MAAAA,KAAK,EAAErC,KAAK,CAACqC,KAAN;AAA1B,KAAlB;;AACA,SAAKpB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGE,IAAI,CAACU,MAArB,EAA6BZ,CAAC,EAA9B,EAAkC;AAChCjB,MAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAAEI,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,KAAK,EAAEjB,MAAM,CAACJ,CAAD,CAAhC;AAAqCoB,QAAAA,KAAK,EAAErC,KAAK,CAACqC,KAAN;AAA5C,OAAlB,EADgC,CAEhC;;AACAjB,MAAAA,IAAI,GAAGD,IAAI,CAACF,CAAD,CAAJ,CAAQwB,SAAR,CACHtB,IAAI,CAACF,CAAD,CAAJ,CAAQS,UAAR,CAAmB,CAAnB,MAA0B,IAA1B,GAAiC,CAAjC,GAAqC,CADlC,EAEHP,IAAI,CAACF,CAAD,CAAJ,CAAQS,UAAR,CAAmBP,IAAI,CAACF,CAAD,CAAJ,CAAQY,MAAR,GAAiB,CAApC,MAA2C,IAA3C,GAAkDV,IAAI,CAACF,CAAD,CAAJ,CAAQY,MAAR,GAAiB,CAAnE,GAAuEV,IAAI,CAACF,CAAD,CAAJ,CAAQY,MAF5E,EAGLC,IAHK,EAAP;AAIA9B,MAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAChBI,QAAAA,IAAI,EAAE,QADU;AAEhBI,QAAAA,OAAO,EAAEnB,IAFO;AAGhBiB,QAAAA,KAAK,EAAErC,KAAK,CAACqC,KAHG;AAIhBG,QAAAA,QAAQ,EAAE;AAJM,OAAlB;AAMAxC,MAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAAEI,QAAAA,IAAI,EAAE,UAAR;AAAoBE,QAAAA,KAAK,EAAE,EAAErC,KAAK,CAACqC;AAAnC,OAAlB;AACD;;AACDrC,IAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAAEI,MAAAA,IAAI,EAAE,UAAR;AAAoBE,MAAAA,KAAK,EAAE,EAAErC,KAAK,CAACqC;AAAnC,KAAlB;AACD;;AACDrC,EAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAAEI,IAAAA,IAAI,EAAE,aAAR;AAAuBE,IAAAA,KAAK,EAAE,EAAErC,KAAK,CAACqC;AAAtC,GAAlB;AACArC,EAAAA,KAAK,CAACkC,MAAN,CAAaH,IAAb,CAAkB;AAAEI,IAAAA,IAAI,EAAE,aAAR;AAAuBE,IAAAA,KAAK,EAAE,EAAErC,KAAK,CAACqC;AAAtC,GAAlB;AAEAd,EAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBC,UAAU,CAAC,CAAD,CAAV,GAAgBN,QAAhC;AACAlB,EAAAA,KAAK,CAACC,IAAN,GAAaiB,QAAb;AACA,SAAO,IAAP;AACD,CA7HD","sourcesContent":["// GFM table, non-standard\n\n'use strict';\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, rows, cell,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least three lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.tShift[nextLine] < state.blkIndent) { return false; }\n\n  // first character of the second line should be '|' or '-'\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  lineText = getLine(state, startLine + 1);\n  if (!/^[-:| ]+$/.test(lineText)) { return false; }\n\n  rows = lineText.split('|');\n  if (rows <= 2) { return false; }\n  aligns = [];\n  for (i = 0; i < rows.length; i++) {\n    t = rows[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === rows.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  rows = lineText.replace(/^\\||\\|$/g, '').split('|');\n  if (aligns.length !== rows.length) { return false; }\n  if (silent) { return true; }\n\n  state.tokens.push({\n    type: 'table_open',\n    lines: tableLines = [ startLine, 0 ],\n    level: state.level++\n  });\n  state.tokens.push({\n    type: 'thead_open',\n    lines: [ startLine, startLine + 1 ],\n    level: state.level++\n  });\n\n  state.tokens.push({\n    type: 'tr_open',\n    lines: [ startLine, startLine + 1 ],\n    level: state.level++\n  });\n  for (i = 0; i < rows.length; i++) {\n    state.tokens.push({\n      type: 'th_open',\n      align: aligns[i],\n      lines: [ startLine, startLine + 1 ],\n      level: state.level++\n    });\n    state.tokens.push({\n      type: 'inline',\n      content: rows[i].trim(),\n      lines: [ startLine, startLine + 1 ],\n      level: state.level,\n      children: []\n    });\n    state.tokens.push({ type: 'th_close', level: --state.level });\n  }\n  state.tokens.push({ type: 'tr_close', level: --state.level });\n  state.tokens.push({ type: 'thead_close', level: --state.level });\n\n  state.tokens.push({\n    type: 'tbody_open',\n    lines: tbodyLines = [ startLine + 2, 0 ],\n    level: state.level++\n  });\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.tShift[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    rows = lineText.replace(/^\\||\\|$/g, '').split('|');\n\n    state.tokens.push({ type: 'tr_open', level: state.level++ });\n    for (i = 0; i < rows.length; i++) {\n      state.tokens.push({ type: 'td_open', align: aligns[i], level: state.level++ });\n      // 0x7c === '|'\n      cell = rows[i].substring(\n          rows[i].charCodeAt(0) === 0x7c ? 1 : 0,\n          rows[i].charCodeAt(rows[i].length - 1) === 0x7c ? rows[i].length - 1 : rows[i].length\n      ).trim();\n      state.tokens.push({\n        type: 'inline',\n        content: cell,\n        level: state.level,\n        children: []\n      });\n      state.tokens.push({ type: 'td_close', level: --state.level });\n    }\n    state.tokens.push({ type: 'tr_close', level: --state.level });\n  }\n  state.tokens.push({ type: 'tbody_close', level: --state.level });\n  state.tokens.push({ type: 'table_close', level: --state.level });\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}
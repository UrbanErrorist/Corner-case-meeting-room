{"ast":null,"code":"// Limit cache size, LRU (least recently used) algorithm.\n\"use strict\";\n\nvar toPosInteger = require(\"es5-ext/number/to-pos-integer\"),\n    lruQueue = require(\"lru-queue\"),\n    extensions = require(\"../lib/registered-extensions\");\n\nextensions.max = function (max, conf, options) {\n  var postfix, queue, hit;\n  max = toPosInteger(max);\n  if (!max) return;\n  queue = lruQueue(max);\n  postfix = options.async && extensions.async || options.promise && extensions.promise ? \"async\" : \"\";\n  conf.on(\"set\" + postfix, hit = function (id) {\n    id = queue.hit(id);\n    if (id === undefined) return;\n    conf.delete(id);\n  });\n  conf.on(\"get\" + postfix, hit);\n  conf.on(\"delete\" + postfix, queue.delete);\n  conf.on(\"clear\" + postfix, queue.clear);\n};","map":{"version":3,"sources":["/Users/blackhat/Desktop/testingRoom/src/frontend/node_modules/memoizee/ext/max.js"],"names":["toPosInteger","require","lruQueue","extensions","max","conf","options","postfix","queue","hit","async","promise","on","id","undefined","delete","clear"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,+BAAD,CAA1B;AAAA,IACIC,QAAQ,GAAOD,OAAO,CAAC,WAAD,CAD1B;AAAA,IAEIE,UAAU,GAAKF,OAAO,CAAC,8BAAD,CAF1B;;AAIAE,UAAU,CAACC,GAAX,GAAiB,UAAUA,GAAV,EAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC9C,MAAIC,OAAJ,EAAaC,KAAb,EAAoBC,GAApB;AAEAL,EAAAA,GAAG,GAAGJ,YAAY,CAACI,GAAD,CAAlB;AACA,MAAI,CAACA,GAAL,EAAU;AAEVI,EAAAA,KAAK,GAAGN,QAAQ,CAACE,GAAD,CAAhB;AACAG,EAAAA,OAAO,GAAID,OAAO,CAACI,KAAR,IAAiBP,UAAU,CAACO,KAA7B,IAAwCJ,OAAO,CAACK,OAAR,IAAmBR,UAAU,CAACQ,OAAtE,GACP,OADO,GACG,EADb;AAGAN,EAAAA,IAAI,CAACO,EAAL,CAAQ,QAAQL,OAAhB,EAAyBE,GAAG,GAAG,UAAUI,EAAV,EAAc;AAC5CA,IAAAA,EAAE,GAAGL,KAAK,CAACC,GAAN,CAAUI,EAAV,CAAL;AACA,QAAIA,EAAE,KAAKC,SAAX,EAAsB;AACtBT,IAAAA,IAAI,CAACU,MAAL,CAAYF,EAAZ;AACA,GAJD;AAKAR,EAAAA,IAAI,CAACO,EAAL,CAAQ,QAAQL,OAAhB,EAAyBE,GAAzB;AACAJ,EAAAA,IAAI,CAACO,EAAL,CAAQ,WAAWL,OAAnB,EAA4BC,KAAK,CAACO,MAAlC;AACAV,EAAAA,IAAI,CAACO,EAAL,CAAQ,UAAUL,OAAlB,EAA2BC,KAAK,CAACQ,KAAjC;AACA,CAlBD","sourcesContent":["// Limit cache size, LRU (least recently used) algorithm.\n\n\"use strict\";\n\nvar toPosInteger = require(\"es5-ext/number/to-pos-integer\")\n  , lruQueue     = require(\"lru-queue\")\n  , extensions   = require(\"../lib/registered-extensions\");\n\nextensions.max = function (max, conf, options) {\n\tvar postfix, queue, hit;\n\n\tmax = toPosInteger(max);\n\tif (!max) return;\n\n\tqueue = lruQueue(max);\n\tpostfix = (options.async && extensions.async) || (options.promise && extensions.promise)\n\t\t? \"async\" : \"\";\n\n\tconf.on(\"set\" + postfix, hit = function (id) {\n\t\tid = queue.hit(id);\n\t\tif (id === undefined) return;\n\t\tconf.delete(id);\n\t});\n\tconf.on(\"get\" + postfix, hit);\n\tconf.on(\"delete\" + postfix, queue.delete);\n\tconf.on(\"clear\" + postfix, queue.clear);\n};\n"]},"metadata":{},"sourceType":"script"}
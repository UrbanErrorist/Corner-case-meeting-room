{"ast":null,"code":"// Process footnote reference list\n'use strict';\n\nmodule.exports = function footnote(state, startLine, endLine, silent) {\n  var oldBMark,\n      oldTShift,\n      oldParentType,\n      pos,\n      label,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine]; // line should be at least 5 chars - \"[^x]:\"\n\n  if (start + 4 > max) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(start) !== 0x5B\n  /* [ */\n  ) {\n      return false;\n    }\n\n  if (state.src.charCodeAt(start + 1) !== 0x5E\n  /* ^ */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  for (pos = start + 2; pos < max; pos++) {\n    if (state.src.charCodeAt(pos) === 0x20) {\n      return false;\n    }\n\n    if (state.src.charCodeAt(pos) === 0x5D\n    /* ] */\n    ) {\n        break;\n      }\n  }\n\n  if (pos === start + 2) {\n    return false;\n  } // no empty footnote labels\n\n\n  if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3A\n  /* : */\n  ) {\n      return false;\n    }\n\n  if (silent) {\n    return true;\n  }\n\n  pos++;\n\n  if (!state.env.footnotes) {\n    state.env.footnotes = {};\n  }\n\n  if (!state.env.footnotes.refs) {\n    state.env.footnotes.refs = {};\n  }\n\n  label = state.src.slice(start + 2, pos - 2);\n  state.env.footnotes.refs[':' + label] = -1;\n  state.tokens.push({\n    type: 'footnote_reference_open',\n    label: label,\n    level: state.level++\n  });\n  oldBMark = state.bMarks[startLine];\n  oldTShift = state.tShift[startLine];\n  oldParentType = state.parentType;\n  state.tShift[startLine] = state.skipSpaces(pos) - pos;\n  state.bMarks[startLine] = pos;\n  state.blkIndent += 4;\n  state.parentType = 'footnote';\n\n  if (state.tShift[startLine] < state.blkIndent) {\n    state.tShift[startLine] += state.blkIndent;\n    state.bMarks[startLine] -= state.blkIndent;\n  }\n\n  state.parser.tokenize(state, startLine, endLine, true);\n  state.parentType = oldParentType;\n  state.blkIndent -= 4;\n  state.tShift[startLine] = oldTShift;\n  state.bMarks[startLine] = oldBMark;\n  state.tokens.push({\n    type: 'footnote_reference_close',\n    level: --state.level\n  });\n  return true;\n};","map":{"version":3,"sources":["/Users/blackhat/Desktop/testingRoom/src/frontend/node_modules/remarkable/lib/rules_block/footnote.js"],"names":["module","exports","footnote","state","startLine","endLine","silent","oldBMark","oldTShift","oldParentType","pos","label","start","bMarks","tShift","max","eMarks","src","charCodeAt","level","options","maxNesting","env","footnotes","refs","slice","tokens","push","type","parentType","skipSpaces","blkIndent","parser","tokenize"],"mappings":"AAAA;AAEA;;AAGAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,SAAzB,EAAoCC,OAApC,EAA6CC,MAA7C,EAAqD;AACpE,MAAIC,QAAJ;AAAA,MAAcC,SAAd;AAAA,MAAyBC,aAAzB;AAAA,MAAwCC,GAAxC;AAAA,MAA6CC,KAA7C;AAAA,MACIC,KAAK,GAAGT,KAAK,CAACU,MAAN,CAAaT,SAAb,IAA0BD,KAAK,CAACW,MAAN,CAAaV,SAAb,CADtC;AAAA,MAEIW,GAAG,GAAGZ,KAAK,CAACa,MAAN,CAAaZ,SAAb,CAFV,CADoE,CAKpE;;AACA,MAAIQ,KAAK,GAAG,CAAR,GAAYG,GAAhB,EAAqB;AAAE,WAAO,KAAP;AAAe;;AAEtC,MAAIZ,KAAK,CAACc,GAAN,CAAUC,UAAV,CAAqBN,KAArB,MAAgC;AAAI;AAAxC,IAAiD;AAAE,aAAO,KAAP;AAAe;;AAClE,MAAIT,KAAK,CAACc,GAAN,CAAUC,UAAV,CAAqBN,KAAK,GAAG,CAA7B,MAAoC;AAAI;AAA5C,IAAqD;AAAE,aAAO,KAAP;AAAe;;AACtE,MAAIT,KAAK,CAACgB,KAAN,IAAehB,KAAK,CAACiB,OAAN,CAAcC,UAAjC,EAA6C;AAAE,WAAO,KAAP;AAAe;;AAE9D,OAAKX,GAAG,GAAGE,KAAK,GAAG,CAAnB,EAAsBF,GAAG,GAAGK,GAA5B,EAAiCL,GAAG,EAApC,EAAwC;AACtC,QAAIP,KAAK,CAACc,GAAN,CAAUC,UAAV,CAAqBR,GAArB,MAA8B,IAAlC,EAAwC;AAAE,aAAO,KAAP;AAAe;;AACzD,QAAIP,KAAK,CAACc,GAAN,CAAUC,UAAV,CAAqBR,GAArB,MAA8B;AAAK;AAAvC,MAAgD;AAC9C;AACD;AACF;;AAED,MAAIA,GAAG,KAAKE,KAAK,GAAG,CAApB,EAAuB;AAAE,WAAO,KAAP;AAAe,GAnB4B,CAmB3B;;;AACzC,MAAIF,GAAG,GAAG,CAAN,IAAWK,GAAX,IAAkBZ,KAAK,CAACc,GAAN,CAAUC,UAAV,CAAqB,EAAER,GAAvB,MAAgC;AAAK;AAA3D,IAAoE;AAAE,aAAO,KAAP;AAAe;;AACrF,MAAIJ,MAAJ,EAAY;AAAE,WAAO,IAAP;AAAc;;AAC5BI,EAAAA,GAAG;;AAEH,MAAI,CAACP,KAAK,CAACmB,GAAN,CAAUC,SAAf,EAA0B;AAAEpB,IAAAA,KAAK,CAACmB,GAAN,CAAUC,SAAV,GAAsB,EAAtB;AAA2B;;AACvD,MAAI,CAACpB,KAAK,CAACmB,GAAN,CAAUC,SAAV,CAAoBC,IAAzB,EAA+B;AAAErB,IAAAA,KAAK,CAACmB,GAAN,CAAUC,SAAV,CAAoBC,IAApB,GAA2B,EAA3B;AAAgC;;AACjEb,EAAAA,KAAK,GAAGR,KAAK,CAACc,GAAN,CAAUQ,KAAV,CAAgBb,KAAK,GAAG,CAAxB,EAA2BF,GAAG,GAAG,CAAjC,CAAR;AACAP,EAAAA,KAAK,CAACmB,GAAN,CAAUC,SAAV,CAAoBC,IAApB,CAAyB,MAAMb,KAA/B,IAAwC,CAAC,CAAzC;AAEAR,EAAAA,KAAK,CAACuB,MAAN,CAAaC,IAAb,CAAkB;AAChBC,IAAAA,IAAI,EAAE,yBADU;AAEhBjB,IAAAA,KAAK,EAAEA,KAFS;AAGhBQ,IAAAA,KAAK,EAAEhB,KAAK,CAACgB,KAAN;AAHS,GAAlB;AAMAZ,EAAAA,QAAQ,GAAGJ,KAAK,CAACU,MAAN,CAAaT,SAAb,CAAX;AACAI,EAAAA,SAAS,GAAGL,KAAK,CAACW,MAAN,CAAaV,SAAb,CAAZ;AACAK,EAAAA,aAAa,GAAGN,KAAK,CAAC0B,UAAtB;AACA1B,EAAAA,KAAK,CAACW,MAAN,CAAaV,SAAb,IAA0BD,KAAK,CAAC2B,UAAN,CAAiBpB,GAAjB,IAAwBA,GAAlD;AACAP,EAAAA,KAAK,CAACU,MAAN,CAAaT,SAAb,IAA0BM,GAA1B;AACAP,EAAAA,KAAK,CAAC4B,SAAN,IAAmB,CAAnB;AACA5B,EAAAA,KAAK,CAAC0B,UAAN,GAAmB,UAAnB;;AAEA,MAAI1B,KAAK,CAACW,MAAN,CAAaV,SAAb,IAA0BD,KAAK,CAAC4B,SAApC,EAA+C;AAC7C5B,IAAAA,KAAK,CAACW,MAAN,CAAaV,SAAb,KAA2BD,KAAK,CAAC4B,SAAjC;AACA5B,IAAAA,KAAK,CAACU,MAAN,CAAaT,SAAb,KAA2BD,KAAK,CAAC4B,SAAjC;AACD;;AAED5B,EAAAA,KAAK,CAAC6B,MAAN,CAAaC,QAAb,CAAsB9B,KAAtB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiD,IAAjD;AAEAF,EAAAA,KAAK,CAAC0B,UAAN,GAAmBpB,aAAnB;AACAN,EAAAA,KAAK,CAAC4B,SAAN,IAAmB,CAAnB;AACA5B,EAAAA,KAAK,CAACW,MAAN,CAAaV,SAAb,IAA0BI,SAA1B;AACAL,EAAAA,KAAK,CAACU,MAAN,CAAaT,SAAb,IAA0BG,QAA1B;AAEAJ,EAAAA,KAAK,CAACuB,MAAN,CAAaC,IAAb,CAAkB;AAChBC,IAAAA,IAAI,EAAE,0BADU;AAEhBT,IAAAA,KAAK,EAAE,EAAEhB,KAAK,CAACgB;AAFC,GAAlB;AAKA,SAAO,IAAP;AACD,CA7DD","sourcesContent":["// Process footnote reference list\n\n'use strict';\n\n\nmodule.exports = function footnote(state, startLine, endLine, silent) {\n  var oldBMark, oldTShift, oldParentType, pos, label,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // line should be at least 5 chars - \"[^x]:\"\n  if (start + 4 > max) { return false; }\n\n  if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n  if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n  if (state.level >= state.options.maxNesting) { return false; }\n\n  for (pos = start + 2; pos < max; pos++) {\n    if (state.src.charCodeAt(pos) === 0x20) { return false; }\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n      break;\n    }\n  }\n\n  if (pos === start + 2) { return false; } // no empty footnote labels\n  if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3A /* : */) { return false; }\n  if (silent) { return true; }\n  pos++;\n\n  if (!state.env.footnotes) { state.env.footnotes = {}; }\n  if (!state.env.footnotes.refs) { state.env.footnotes.refs = {}; }\n  label = state.src.slice(start + 2, pos - 2);\n  state.env.footnotes.refs[':' + label] = -1;\n\n  state.tokens.push({\n    type: 'footnote_reference_open',\n    label: label,\n    level: state.level++\n  });\n\n  oldBMark = state.bMarks[startLine];\n  oldTShift = state.tShift[startLine];\n  oldParentType = state.parentType;\n  state.tShift[startLine] = state.skipSpaces(pos) - pos;\n  state.bMarks[startLine] = pos;\n  state.blkIndent += 4;\n  state.parentType = 'footnote';\n\n  if (state.tShift[startLine] < state.blkIndent) {\n    state.tShift[startLine] += state.blkIndent;\n    state.bMarks[startLine] -= state.blkIndent;\n  }\n\n  state.parser.tokenize(state, startLine, endLine, true);\n\n  state.parentType = oldParentType;\n  state.blkIndent -= 4;\n  state.tShift[startLine] = oldTShift;\n  state.bMarks[startLine] = oldBMark;\n\n  state.tokens.push({\n    type: 'footnote_reference_close',\n    level: --state.level\n  });\n\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}
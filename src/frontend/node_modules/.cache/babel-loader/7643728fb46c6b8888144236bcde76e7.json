{"ast":null,"code":"// Process inline footnotes (^[...])\n'use strict';\n\nvar parseLinkLabel = require('../helpers/parse_link_label');\n\nmodule.exports = function footnote_inline(state, silent) {\n  var labelStart,\n      labelEnd,\n      footnoteId,\n      oldLength,\n      max = state.posMax,\n      start = state.pos;\n\n  if (start + 2 >= max) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(start) !== 0x5E\n  /* ^ */\n  ) {\n      return false;\n    }\n\n  if (state.src.charCodeAt(start + 1) !== 0x5B\n  /* [ */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  labelStart = start + 2;\n  labelEnd = parseLinkLabel(state, start + 1); // parser failed to find ']', so it's not a valid note\n\n  if (labelEnd < 0) {\n    return false;\n  } // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n\n\n  if (!silent) {\n    if (!state.env.footnotes) {\n      state.env.footnotes = {};\n    }\n\n    if (!state.env.footnotes.list) {\n      state.env.footnotes.list = [];\n    }\n\n    footnoteId = state.env.footnotes.list.length;\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n    state.push({\n      type: 'footnote_ref',\n      id: footnoteId,\n      level: state.level\n    });\n    state.linkLevel++;\n    oldLength = state.tokens.length;\n    state.parser.tokenize(state);\n    state.env.footnotes.list[footnoteId] = {\n      tokens: state.tokens.splice(oldLength)\n    };\n    state.linkLevel--;\n  }\n\n  state.pos = labelEnd + 1;\n  state.posMax = max;\n  return true;\n};","map":{"version":3,"sources":["/Users/blackhat/Desktop/testingRoom/src/frontend/node_modules/remarkable/lib/rules_inline/footnote_inline.js"],"names":["parseLinkLabel","require","module","exports","footnote_inline","state","silent","labelStart","labelEnd","footnoteId","oldLength","max","posMax","start","pos","src","charCodeAt","level","options","maxNesting","env","footnotes","list","length","push","type","id","linkLevel","tokens","parser","tokenize","splice"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,6BAAD,CAA5B;;AAGAC,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,MAAhC,EAAwC;AACvD,MAAIC,UAAJ;AAAA,MACIC,QADJ;AAAA,MAEIC,UAFJ;AAAA,MAGIC,SAHJ;AAAA,MAIIC,GAAG,GAAGN,KAAK,CAACO,MAJhB;AAAA,MAKIC,KAAK,GAAGR,KAAK,CAACS,GALlB;;AAOA,MAAID,KAAK,GAAG,CAAR,IAAaF,GAAjB,EAAsB;AAAE,WAAO,KAAP;AAAe;;AACvC,MAAIN,KAAK,CAACU,GAAN,CAAUC,UAAV,CAAqBH,KAArB,MAAgC;AAAI;AAAxC,IAAiD;AAAE,aAAO,KAAP;AAAe;;AAClE,MAAIR,KAAK,CAACU,GAAN,CAAUC,UAAV,CAAqBH,KAAK,GAAG,CAA7B,MAAoC;AAAI;AAA5C,IAAqD;AAAE,aAAO,KAAP;AAAe;;AACtE,MAAIR,KAAK,CAACY,KAAN,IAAeZ,KAAK,CAACa,OAAN,CAAcC,UAAjC,EAA6C;AAAE,WAAO,KAAP;AAAe;;AAE9DZ,EAAAA,UAAU,GAAGM,KAAK,GAAG,CAArB;AACAL,EAAAA,QAAQ,GAAGR,cAAc,CAACK,KAAD,EAAQQ,KAAK,GAAG,CAAhB,CAAzB,CAduD,CAgBvD;;AACA,MAAIL,QAAQ,GAAG,CAAf,EAAkB;AAAE,WAAO,KAAP;AAAe,GAjBoB,CAmBvD;AACA;AACA;;;AACA,MAAI,CAACF,MAAL,EAAa;AACX,QAAI,CAACD,KAAK,CAACe,GAAN,CAAUC,SAAf,EAA0B;AAAEhB,MAAAA,KAAK,CAACe,GAAN,CAAUC,SAAV,GAAsB,EAAtB;AAA2B;;AACvD,QAAI,CAAChB,KAAK,CAACe,GAAN,CAAUC,SAAV,CAAoBC,IAAzB,EAA+B;AAAEjB,MAAAA,KAAK,CAACe,GAAN,CAAUC,SAAV,CAAoBC,IAApB,GAA2B,EAA3B;AAAgC;;AACjEb,IAAAA,UAAU,GAAGJ,KAAK,CAACe,GAAN,CAAUC,SAAV,CAAoBC,IAApB,CAAyBC,MAAtC;AAEAlB,IAAAA,KAAK,CAACS,GAAN,GAAYP,UAAZ;AACAF,IAAAA,KAAK,CAACO,MAAN,GAAeJ,QAAf;AAEAH,IAAAA,KAAK,CAACmB,IAAN,CAAW;AACTC,MAAAA,IAAI,EAAE,cADG;AAETC,MAAAA,EAAE,EAAEjB,UAFK;AAGTQ,MAAAA,KAAK,EAAEZ,KAAK,CAACY;AAHJ,KAAX;AAKAZ,IAAAA,KAAK,CAACsB,SAAN;AACAjB,IAAAA,SAAS,GAAGL,KAAK,CAACuB,MAAN,CAAaL,MAAzB;AACAlB,IAAAA,KAAK,CAACwB,MAAN,CAAaC,QAAb,CAAsBzB,KAAtB;AACAA,IAAAA,KAAK,CAACe,GAAN,CAAUC,SAAV,CAAoBC,IAApB,CAAyBb,UAAzB,IAAuC;AAAEmB,MAAAA,MAAM,EAAEvB,KAAK,CAACuB,MAAN,CAAaG,MAAb,CAAoBrB,SAApB;AAAV,KAAvC;AACAL,IAAAA,KAAK,CAACsB,SAAN;AACD;;AAEDtB,EAAAA,KAAK,CAACS,GAAN,GAAYN,QAAQ,GAAG,CAAvB;AACAH,EAAAA,KAAK,CAACO,MAAN,GAAeD,GAAf;AACA,SAAO,IAAP;AACD,CA7CD","sourcesContent":["// Process inline footnotes (^[...])\n\n'use strict';\n\nvar parseLinkLabel = require('../helpers/parse_link_label');\n\n\nmodule.exports = function footnote_inline(state, silent) {\n  var labelStart,\n      labelEnd,\n      footnoteId,\n      oldLength,\n      max = state.posMax,\n      start = state.pos;\n\n  if (start + 2 >= max) { return false; }\n  if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }\n  if (state.src.charCodeAt(start + 1) !== 0x5B/* [ */) { return false; }\n  if (state.level >= state.options.maxNesting) { return false; }\n\n  labelStart = start + 2;\n  labelEnd = parseLinkLabel(state, start + 1);\n\n  // parser failed to find ']', so it's not a valid note\n  if (labelEnd < 0) { return false; }\n\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    if (!state.env.footnotes) { state.env.footnotes = {}; }\n    if (!state.env.footnotes.list) { state.env.footnotes.list = []; }\n    footnoteId = state.env.footnotes.list.length;\n\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    state.push({\n      type: 'footnote_ref',\n      id: footnoteId,\n      level: state.level\n    });\n    state.linkLevel++;\n    oldLength = state.tokens.length;\n    state.parser.tokenize(state);\n    state.env.footnotes.list[footnoteId] = { tokens: state.tokens.splice(oldLength) };\n    state.linkLevel--;\n  }\n\n  state.pos = labelEnd + 1;\n  state.posMax = max;\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}
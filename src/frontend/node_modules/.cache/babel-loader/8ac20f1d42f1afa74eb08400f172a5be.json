{"ast":null,"code":"'use strict';\n\nvar normalizeLink = require('./normalize_link');\n\nvar unescapeMd = require('../common/utils').unescapeMd;\n/**\n * Parse link destination\n *\n *   - on success it returns a string and updates state.pos;\n *   - on failure it returns null\n *\n * @param  {Object} state\n * @param  {Number} pos\n * @api private\n */\n\n\nmodule.exports = function parseLinkDestination(state, pos) {\n  var code,\n      level,\n      link,\n      start = pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(pos) === 0x3C\n  /* < */\n  ) {\n      pos++;\n\n      while (pos < max) {\n        code = state.src.charCodeAt(pos);\n\n        if (code === 0x0A\n        /* \\n */\n        ) {\n            return false;\n          }\n\n        if (code === 0x3E\n        /* > */\n        ) {\n            link = normalizeLink(unescapeMd(state.src.slice(start + 1, pos)));\n\n            if (!state.parser.validateLink(link)) {\n              return false;\n            }\n\n            state.pos = pos + 1;\n            state.linkContent = link;\n            return true;\n          }\n\n        if (code === 0x5C\n        /* \\ */\n        && pos + 1 < max) {\n          pos += 2;\n          continue;\n        }\n\n        pos++;\n      } // no closing '>'\n\n\n      return false;\n    } // this should be ... } else { ... branch\n\n\n  level = 0;\n\n  while (pos < max) {\n    code = state.src.charCodeAt(pos);\n\n    if (code === 0x20) {\n      break;\n    } // ascii control chars\n\n\n    if (code < 0x20 || code === 0x7F) {\n      break;\n    }\n\n    if (code === 0x5C\n    /* \\ */\n    && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28\n    /* ( */\n    ) {\n        level++;\n\n        if (level > 1) {\n          break;\n        }\n      }\n\n    if (code === 0x29\n    /* ) */\n    ) {\n        level--;\n\n        if (level < 0) {\n          break;\n        }\n      }\n\n    pos++;\n  }\n\n  if (start === pos) {\n    return false;\n  }\n\n  link = unescapeMd(state.src.slice(start, pos));\n\n  if (!state.parser.validateLink(link)) {\n    return false;\n  }\n\n  state.linkContent = link;\n  state.pos = pos;\n  return true;\n};","map":{"version":3,"sources":["/Users/blackhat/Desktop/testingRoom/src/frontend/node_modules/remarkable/lib/helpers/parse_link_destination.js"],"names":["normalizeLink","require","unescapeMd","module","exports","parseLinkDestination","state","pos","code","level","link","start","max","posMax","src","charCodeAt","slice","parser","validateLink","linkContent"],"mappings":"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","sourcesContent":["'use strict';\n\n\nvar normalizeLink = require('./normalize_link');\nvar unescapeMd    = require('../common/utils').unescapeMd;\n\n/**\n * Parse link destination\n *\n *   - on success it returns a string and updates state.pos;\n *   - on failure it returns null\n *\n * @param  {Object} state\n * @param  {Number} pos\n * @api private\n */\n\nmodule.exports = function parseLinkDestination(state, pos) {\n  var code, level, link,\n      start = pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = state.src.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return false; }\n      if (code === 0x3E /* > */) {\n        link = normalizeLink(unescapeMd(state.src.slice(start + 1, pos)));\n        if (!state.parser.validateLink(link)) { return false; }\n        state.pos = pos + 1;\n        state.linkContent = link;\n        return true;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return false;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = state.src.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control chars\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 1) { break; }\n    }\n\n    if (code === 0x29 /* ) */) {\n      level--;\n      if (level < 0) { break; }\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return false; }\n\n  link = unescapeMd(state.src.slice(start, pos));\n  if (!state.parser.validateLink(link)) { return false; }\n\n  state.linkContent = link;\n  state.pos = pos;\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}
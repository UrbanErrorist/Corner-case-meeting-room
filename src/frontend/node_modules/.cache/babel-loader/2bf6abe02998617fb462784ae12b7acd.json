{"ast":null,"code":"// Reference counter, useful for garbage collector like functionality\n\"use strict\";\n\nvar d = require(\"d\"),\n    extensions = require(\"../lib/registered-extensions\"),\n    create = Object.create,\n    defineProperties = Object.defineProperties;\n\nextensions.refCounter = function (ignore, conf, options) {\n  var cache, postfix;\n  cache = create(null);\n  postfix = options.async && extensions.async || options.promise && extensions.promise ? \"async\" : \"\";\n  conf.on(\"set\" + postfix, function (id, length) {\n    cache[id] = length || 1;\n  });\n  conf.on(\"get\" + postfix, function (id) {\n    ++cache[id];\n  });\n  conf.on(\"delete\" + postfix, function (id) {\n    delete cache[id];\n  });\n  conf.on(\"clear\" + postfix, function () {\n    cache = {};\n  });\n  defineProperties(conf.memoized, {\n    deleteRef: d(function () {\n      var id = conf.get(arguments);\n      if (id === null) return null;\n      if (!cache[id]) return null;\n\n      if (! --cache[id]) {\n        conf.delete(id);\n        return true;\n      }\n\n      return false;\n    }),\n    getRefCount: d(function () {\n      var id = conf.get(arguments);\n      if (id === null) return 0;\n      if (!cache[id]) return 0;\n      return cache[id];\n    })\n  });\n};","map":{"version":3,"sources":["/Users/blackhat/TV Shows/Meeting Room/src/frontend/node_modules/memoizee/ext/ref-counter.js"],"names":["d","require","extensions","create","Object","defineProperties","refCounter","ignore","conf","options","cache","postfix","async","promise","on","id","length","memoized","deleteRef","get","arguments","delete","getRefCount"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,CAAC,GAAYC,OAAO,CAAC,GAAD,CAAxB;AAAA,IACIC,UAAU,GAAGD,OAAO,CAAC,8BAAD,CADxB;AAAA,IAGIE,MAAM,GAAGC,MAAM,CAACD,MAHpB;AAAA,IAG4BE,gBAAgB,GAAGD,MAAM,CAACC,gBAHtD;;AAKAH,UAAU,CAACI,UAAX,GAAwB,UAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiC;AACxD,MAAIC,KAAJ,EAAWC,OAAX;AAEAD,EAAAA,KAAK,GAAGP,MAAM,CAAC,IAAD,CAAd;AACAQ,EAAAA,OAAO,GAAIF,OAAO,CAACG,KAAR,IAAiBV,UAAU,CAACU,KAA7B,IAAwCH,OAAO,CAACI,OAAR,IAAmBX,UAAU,CAACW,OAAtE,GACP,OADO,GACG,EADb;AAGAL,EAAAA,IAAI,CAACM,EAAL,CAAQ,QAAQH,OAAhB,EAAyB,UAAUI,EAAV,EAAcC,MAAd,EAAsB;AAC/CN,IAAAA,KAAK,CAACK,EAAD,CAAL,GAAYC,MAAM,IAAI,CAAtB;AACA,GAFA;AAGAR,EAAAA,IAAI,CAACM,EAAL,CAAQ,QAAQH,OAAhB,EAAyB,UAAUI,EAAV,EAAc;AACvC,MAAEL,KAAK,CAACK,EAAD,CAAP;AACA,GAFA;AAGAP,EAAAA,IAAI,CAACM,EAAL,CAAQ,WAAWH,OAAnB,EAA4B,UAAUI,EAAV,EAAc;AAC1C,WAAOL,KAAK,CAACK,EAAD,CAAZ;AACA,GAFA;AAGAP,EAAAA,IAAI,CAACM,EAAL,CAAQ,UAAUH,OAAlB,EAA2B,YAAY;AACvCD,IAAAA,KAAK,GAAG,EAAR;AACA,GAFA;AAIAL,EAAAA,gBAAgB,CAACG,IAAI,CAACS,QAAN,EAAgB;AAC/BC,IAAAA,SAAS,EAAElB,CAAC,CAAC,YAAY;AACxB,UAAIe,EAAE,GAAGP,IAAI,CAACW,GAAL,CAASC,SAAT,CAAT;AACA,UAAIL,EAAE,KAAK,IAAX,EAAiB,OAAO,IAAP;AACjB,UAAI,CAACL,KAAK,CAACK,EAAD,CAAV,EAAgB,OAAO,IAAP;;AAChB,UAAI,CAAC,GAAEL,KAAK,CAACK,EAAD,CAAZ,EAAkB;AACjBP,QAAAA,IAAI,CAACa,MAAL,CAAYN,EAAZ;AACA,eAAO,IAAP;AACA;;AACD,aAAO,KAAP;AACA,KATW,CADmB;AAW/BO,IAAAA,WAAW,EAAEtB,CAAC,CAAC,YAAY;AAC1B,UAAIe,EAAE,GAAGP,IAAI,CAACW,GAAL,CAASC,SAAT,CAAT;AACA,UAAIL,EAAE,KAAK,IAAX,EAAiB,OAAO,CAAP;AACjB,UAAI,CAACL,KAAK,CAACK,EAAD,CAAV,EAAgB,OAAO,CAAP;AAChB,aAAOL,KAAK,CAACK,EAAD,CAAZ;AACA,KALa;AAXiB,GAAhB,CAAhB;AAkBA,CAtCD","sourcesContent":["// Reference counter, useful for garbage collector like functionality\n\n\"use strict\";\n\nvar d          = require(\"d\")\n  , extensions = require(\"../lib/registered-extensions\")\n\n  , create = Object.create, defineProperties = Object.defineProperties;\n\nextensions.refCounter = function (ignore, conf, options) {\n\tvar cache, postfix;\n\n\tcache = create(null);\n\tpostfix = (options.async && extensions.async) || (options.promise && extensions.promise)\n\t\t? \"async\" : \"\";\n\n\tconf.on(\"set\" + postfix, function (id, length) {\n cache[id] = length || 1;\n});\n\tconf.on(\"get\" + postfix, function (id) {\n ++cache[id];\n});\n\tconf.on(\"delete\" + postfix, function (id) {\n delete cache[id];\n});\n\tconf.on(\"clear\" + postfix, function () {\n cache = {};\n});\n\n\tdefineProperties(conf.memoized, {\n\t\tdeleteRef: d(function () {\n\t\t\tvar id = conf.get(arguments);\n\t\t\tif (id === null) return null;\n\t\t\tif (!cache[id]) return null;\n\t\t\tif (!--cache[id]) {\n\t\t\t\tconf.delete(id);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}),\n\t\tgetRefCount: d(function () {\n\t\t\tvar id = conf.get(arguments);\n\t\t\tif (id === null) return 0;\n\t\t\tif (!cache[id]) return 0;\n\t\t\treturn cache[id];\n\t\t})\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*!\n * @description Recursive object extending\n * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>\n * @license MIT\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2013-2018 Viacheslav Lotsmanov\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n'use strict';\n\nfunction isSpecificValue(val) {\n  return val instanceof Buffer || val instanceof Date || val instanceof RegExp ? true : false;\n}\n\nfunction cloneSpecificValue(val) {\n  if (val instanceof Buffer) {\n    var x = Buffer.alloc ? Buffer.alloc(val.length) : new Buffer(val.length);\n    val.copy(x);\n    return x;\n  } else if (val instanceof Date) {\n    return new Date(val.getTime());\n  } else if (val instanceof RegExp) {\n    return new RegExp(val);\n  } else {\n    throw new Error('Unexpected situation');\n  }\n}\n/**\n * Recursive cloning array.\n */\n\n\nfunction deepCloneArray(arr) {\n  var clone = [];\n  arr.forEach(function (item, index) {\n    if (typeof item === 'object' && item !== null) {\n      if (Array.isArray(item)) {\n        clone[index] = deepCloneArray(item);\n      } else if (isSpecificValue(item)) {\n        clone[index] = cloneSpecificValue(item);\n      } else {\n        clone[index] = deepExtend({}, item);\n      }\n    } else {\n      clone[index] = item;\n    }\n  });\n  return clone;\n}\n\nfunction safeGetProperty(object, property) {\n  return property === '__proto__' ? undefined : object[property];\n}\n/**\n * Extening object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\n\n\nvar deepExtend = module.exports = function ()\n/*obj_1, [obj_2], [obj_N]*/\n{\n  if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n    return false;\n  }\n\n  if (arguments.length < 2) {\n    return arguments[0];\n  }\n\n  var target = arguments[0]; // convert arguments to array and cut off target object\n\n  var args = Array.prototype.slice.call(arguments, 1);\n  var val, src, clone;\n  args.forEach(function (obj) {\n    // skip argument if isn't an object, is null, or is an array\n    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) {\n      return;\n    }\n\n    Object.keys(obj).forEach(function (key) {\n      src = safeGetProperty(target, key); // source value\n\n      val = safeGetProperty(obj, key); // new value\n      // recursion prevention\n\n      if (val === target) {\n        return;\n        /**\n         * if new value isn't object then just overwrite by new value\n         * instead of extending.\n         */\n      } else if (typeof val !== 'object' || val === null) {\n        target[key] = val;\n        return; // just clone arrays (and recursive clone objects inside)\n      } else if (Array.isArray(val)) {\n        target[key] = deepCloneArray(val);\n        return; // custom cloning and overwrite for specific objects\n      } else if (isSpecificValue(val)) {\n        target[key] = cloneSpecificValue(val);\n        return; // overwrite by new value if source isn't object or array\n      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n        target[key] = deepExtend({}, val);\n        return; // source value and new value is objects both, extending...\n      } else {\n        target[key] = deepExtend(src, val);\n        return;\n      }\n    });\n  });\n  return target;\n};","map":{"version":3,"sources":["/Users/blackhat/TV Shows/Meeting Room/src/frontend/node_modules/swagger-client/node_modules/deep-extend/lib/deep-extend.js"],"names":["isSpecificValue","val","Buffer","Date","RegExp","cloneSpecificValue","x","alloc","length","copy","getTime","Error","deepCloneArray","arr","clone","forEach","item","index","Array","isArray","deepExtend","safeGetProperty","object","property","undefined","module","exports","arguments","target","args","prototype","slice","call","src","obj","Object","keys","key"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;AAEA,SAASA,eAAT,CAAyBC,GAAzB,EAA8B;AAC7B,SACCA,GAAG,YAAYC,MAAf,IACGD,GAAG,YAAYE,IADlB,IAEGF,GAAG,YAAYG,MAHZ,GAIH,IAJG,GAII,KAJX;AAKA;;AAED,SAASC,kBAAT,CAA4BJ,GAA5B,EAAiC;AAChC,MAAIA,GAAG,YAAYC,MAAnB,EAA2B;AAC1B,QAAII,CAAC,GAAGJ,MAAM,CAACK,KAAP,GACLL,MAAM,CAACK,KAAP,CAAaN,GAAG,CAACO,MAAjB,CADK,GAEL,IAAIN,MAAJ,CAAWD,GAAG,CAACO,MAAf,CAFH;AAGAP,IAAAA,GAAG,CAACQ,IAAJ,CAASH,CAAT;AACA,WAAOA,CAAP;AACA,GAND,MAMO,IAAIL,GAAG,YAAYE,IAAnB,EAAyB;AAC/B,WAAO,IAAIA,IAAJ,CAASF,GAAG,CAACS,OAAJ,EAAT,CAAP;AACA,GAFM,MAEA,IAAIT,GAAG,YAAYG,MAAnB,EAA2B;AACjC,WAAO,IAAIA,MAAJ,CAAWH,GAAX,CAAP;AACA,GAFM,MAEA;AACN,UAAM,IAAIU,KAAJ,CAAU,sBAAV,CAAN;AACA;AACD;AAED;;;;;AAGA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC5B,MAAIC,KAAK,GAAG,EAAZ;AACAD,EAAAA,GAAG,CAACE,OAAJ,CAAY,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAClC,QAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;AAC9C,UAAIE,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACxBF,QAAAA,KAAK,CAACG,KAAD,CAAL,GAAeL,cAAc,CAACI,IAAD,CAA7B;AACA,OAFD,MAEO,IAAIhB,eAAe,CAACgB,IAAD,CAAnB,EAA2B;AACjCF,QAAAA,KAAK,CAACG,KAAD,CAAL,GAAeZ,kBAAkB,CAACW,IAAD,CAAjC;AACA,OAFM,MAEA;AACNF,QAAAA,KAAK,CAACG,KAAD,CAAL,GAAeG,UAAU,CAAC,EAAD,EAAKJ,IAAL,CAAzB;AACA;AACD,KARD,MAQO;AACNF,MAAAA,KAAK,CAACG,KAAD,CAAL,GAAeD,IAAf;AACA;AACD,GAZD;AAaA,SAAOF,KAAP;AACA;;AAED,SAASO,eAAT,CAAyBC,MAAzB,EAAiCC,QAAjC,EAA2C;AAC1C,SAAOA,QAAQ,KAAK,WAAb,GAA2BC,SAA3B,GAAuCF,MAAM,CAACC,QAAD,CAApD;AACA;AAED;;;;;;;;;;;AASA,IAAIH,UAAU,GAAGK,MAAM,CAACC,OAAP,GAAiB;AAAU;AAA6B;AACxE,MAAIC,SAAS,CAACnB,MAAV,GAAmB,CAAnB,IAAwB,OAAOmB,SAAS,CAAC,CAAD,CAAhB,KAAwB,QAApD,EAA8D;AAC7D,WAAO,KAAP;AACA;;AAED,MAAIA,SAAS,CAACnB,MAAV,GAAmB,CAAvB,EAA0B;AACzB,WAAOmB,SAAS,CAAC,CAAD,CAAhB;AACA;;AAED,MAAIC,MAAM,GAAGD,SAAS,CAAC,CAAD,CAAtB,CATwE,CAWxE;;AACA,MAAIE,IAAI,GAAGX,KAAK,CAACY,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,SAA3B,EAAsC,CAAtC,CAAX;AAEA,MAAI1B,GAAJ,EAASgC,GAAT,EAAcnB,KAAd;AAEAe,EAAAA,IAAI,CAACd,OAAL,CAAa,UAAUmB,GAAV,EAAe;AAC3B;AACA,QAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAnC,IAA2ChB,KAAK,CAACC,OAAN,CAAce,GAAd,CAA/C,EAAmE;AAClE;AACA;;AAEDC,IAAAA,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBnB,OAAjB,CAAyB,UAAUsB,GAAV,EAAe;AACvCJ,MAAAA,GAAG,GAAGZ,eAAe,CAACO,MAAD,EAASS,GAAT,CAArB,CADuC,CACH;;AACpCpC,MAAAA,GAAG,GAAGoB,eAAe,CAACa,GAAD,EAAMG,GAAN,CAArB,CAFuC,CAEN;AAEjC;;AACA,UAAIpC,GAAG,KAAK2B,MAAZ,EAAoB;AACnB;AAED;;;;AAIC,OAPD,MAOO,IAAI,OAAO3B,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C;AACnD2B,QAAAA,MAAM,CAACS,GAAD,CAAN,GAAcpC,GAAd;AACA,eAFmD,CAIpD;AACC,OALM,MAKA,IAAIiB,KAAK,CAACC,OAAN,CAAclB,GAAd,CAAJ,EAAwB;AAC9B2B,QAAAA,MAAM,CAACS,GAAD,CAAN,GAAczB,cAAc,CAACX,GAAD,CAA5B;AACA,eAF8B,CAI/B;AACC,OALM,MAKA,IAAID,eAAe,CAACC,GAAD,CAAnB,EAA0B;AAChC2B,QAAAA,MAAM,CAACS,GAAD,CAAN,GAAchC,kBAAkB,CAACJ,GAAD,CAAhC;AACA,eAFgC,CAIjC;AACC,OALM,MAKA,IAAI,OAAOgC,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAnC,IAA2Cf,KAAK,CAACC,OAAN,CAAcc,GAAd,CAA/C,EAAmE;AACzEL,QAAAA,MAAM,CAACS,GAAD,CAAN,GAAcjB,UAAU,CAAC,EAAD,EAAKnB,GAAL,CAAxB;AACA,eAFyE,CAI1E;AACC,OALM,MAKA;AACN2B,QAAAA,MAAM,CAACS,GAAD,CAAN,GAAcjB,UAAU,CAACa,GAAD,EAAMhC,GAAN,CAAxB;AACA;AACA;AACD,KApCD;AAqCA,GA3CD;AA6CA,SAAO2B,MAAP;AACA,CA9DD","sourcesContent":["/*!\n * @description Recursive object extending\n * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>\n * @license MIT\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2013-2018 Viacheslav Lotsmanov\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\nfunction isSpecificValue(val) {\n\treturn (\n\t\tval instanceof Buffer\n\t\t|| val instanceof Date\n\t\t|| val instanceof RegExp\n\t) ? true : false;\n}\n\nfunction cloneSpecificValue(val) {\n\tif (val instanceof Buffer) {\n\t\tvar x = Buffer.alloc\n\t\t\t? Buffer.alloc(val.length)\n\t\t\t: new Buffer(val.length);\n\t\tval.copy(x);\n\t\treturn x;\n\t} else if (val instanceof Date) {\n\t\treturn new Date(val.getTime());\n\t} else if (val instanceof RegExp) {\n\t\treturn new RegExp(val);\n\t} else {\n\t\tthrow new Error('Unexpected situation');\n\t}\n}\n\n/**\n * Recursive cloning array.\n */\nfunction deepCloneArray(arr) {\n\tvar clone = [];\n\tarr.forEach(function (item, index) {\n\t\tif (typeof item === 'object' && item !== null) {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\tclone[index] = deepCloneArray(item);\n\t\t\t} else if (isSpecificValue(item)) {\n\t\t\t\tclone[index] = cloneSpecificValue(item);\n\t\t\t} else {\n\t\t\t\tclone[index] = deepExtend({}, item);\n\t\t\t}\n\t\t} else {\n\t\t\tclone[index] = item;\n\t\t}\n\t});\n\treturn clone;\n}\n\nfunction safeGetProperty(object, property) {\n\treturn property === '__proto__' ? undefined : object[property];\n}\n\n/**\n * Extening object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nvar deepExtend = module.exports = function (/*obj_1, [obj_2], [obj_N]*/) {\n\tif (arguments.length < 1 || typeof arguments[0] !== 'object') {\n\t\treturn false;\n\t}\n\n\tif (arguments.length < 2) {\n\t\treturn arguments[0];\n\t}\n\n\tvar target = arguments[0];\n\n\t// convert arguments to array and cut off target object\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\tvar val, src, clone;\n\n\targs.forEach(function (obj) {\n\t\t// skip argument if isn't an object, is null, or is an array\n\t\tif (typeof obj !== 'object' || obj === null || Array.isArray(obj)) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.keys(obj).forEach(function (key) {\n\t\t\tsrc = safeGetProperty(target, key); // source value\n\t\t\tval = safeGetProperty(obj, key); // new value\n\n\t\t\t// recursion prevention\n\t\t\tif (val === target) {\n\t\t\t\treturn;\n\n\t\t\t/**\n\t\t\t * if new value isn't object then just overwrite by new value\n\t\t\t * instead of extending.\n\t\t\t */\n\t\t\t} else if (typeof val !== 'object' || val === null) {\n\t\t\t\ttarget[key] = val;\n\t\t\t\treturn;\n\n\t\t\t// just clone arrays (and recursive clone objects inside)\n\t\t\t} else if (Array.isArray(val)) {\n\t\t\t\ttarget[key] = deepCloneArray(val);\n\t\t\t\treturn;\n\n\t\t\t// custom cloning and overwrite for specific objects\n\t\t\t} else if (isSpecificValue(val)) {\n\t\t\t\ttarget[key] = cloneSpecificValue(val);\n\t\t\t\treturn;\n\n\t\t\t// overwrite by new value if source isn't object or array\n\t\t\t} else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n\t\t\t\ttarget[key] = deepExtend({}, val);\n\t\t\t\treturn;\n\n\t\t\t// source value and new value is objects both, extending...\n\t\t\t} else {\n\t\t\t\ttarget[key] = deepExtend(src, val);\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\t});\n\n\treturn target;\n};\n"]},"metadata":{},"sourceType":"script"}
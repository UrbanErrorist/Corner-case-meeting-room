{"ast":null,"code":"\"use strict\";\n\nvar toArray = require(\"es5-ext/array/to-array\"),\n    isValue = require(\"es5-ext/object/is-value\"),\n    callable = require(\"es5-ext/object/valid-callable\");\n\nvar slice = Array.prototype.slice,\n    resolveArgs;\n\nresolveArgs = function resolveArgs(args) {\n  return this.map(function (resolve, i) {\n    return resolve ? resolve(args[i]) : args[i];\n  }).concat(slice.call(args, this.length));\n};\n\nmodule.exports = function (resolvers) {\n  resolvers = toArray(resolvers);\n  resolvers.forEach(function (resolve) {\n    if (isValue(resolve)) callable(resolve);\n  });\n  return resolveArgs.bind(resolvers);\n};","map":{"version":3,"sources":["/Users/blackhat/TV Shows/Meeting Room/src/frontend/node_modules/memoizee/lib/resolve-resolve.js"],"names":["toArray","require","isValue","callable","slice","Array","prototype","resolveArgs","args","map","resolve","i","concat","call","length","module","exports","resolvers","forEach","bind"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAIC,OAAO,CAAC,wBAAD,CAAtB;AAAA,IACIC,OAAO,GAAID,OAAO,CAAC,yBAAD,CADtB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAAC,+BAAD,CAFtB;;AAIA,IAAIG,KAAK,GAAGC,KAAK,CAACC,SAAN,CAAgBF,KAA5B;AAAA,IAAmCG,WAAnC;;AAEAA,WAAW,GAAG,qBAAUC,IAAV,EAAgB;AAC7B,SAAO,KAAKC,GAAL,CAAS,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;AACrC,WAAOD,OAAO,GAAGA,OAAO,CAACF,IAAI,CAACG,CAAD,CAAL,CAAV,GAAsBH,IAAI,CAACG,CAAD,CAAxC;AACA,GAFM,EAEJC,MAFI,CAEGR,KAAK,CAACS,IAAN,CAAWL,IAAX,EAAiB,KAAKM,MAAtB,CAFH,CAAP;AAGA,CAJD;;AAMAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqB;AACrCA,EAAAA,SAAS,GAAGjB,OAAO,CAACiB,SAAD,CAAnB;AACAA,EAAAA,SAAS,CAACC,OAAV,CAAkB,UAAUR,OAAV,EAAmB;AACpC,QAAIR,OAAO,CAACQ,OAAD,CAAX,EAAsBP,QAAQ,CAACO,OAAD,CAAR;AACtB,GAFD;AAGA,SAAOH,WAAW,CAACY,IAAZ,CAAiBF,SAAjB,CAAP;AACA,CAND","sourcesContent":["\"use strict\";\n\nvar toArray  = require(\"es5-ext/array/to-array\")\n  , isValue  = require(\"es5-ext/object/is-value\")\n  , callable = require(\"es5-ext/object/valid-callable\");\n\nvar slice = Array.prototype.slice, resolveArgs;\n\nresolveArgs = function (args) {\n\treturn this.map(function (resolve, i) {\n\t\treturn resolve ? resolve(args[i]) : args[i];\n\t}).concat(slice.call(args, this.length));\n};\n\nmodule.exports = function (resolvers) {\n\tresolvers = toArray(resolvers);\n\tresolvers.forEach(function (resolve) {\n\t\tif (isValue(resolve)) callable(resolve);\n\t});\n\treturn resolveArgs.bind(resolvers);\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n/**\n * Parse link labels\n *\n * This function assumes that first character (`[`) already matches;\n * returns the end of the label.\n *\n * @param  {Object} state\n * @param  {Number} start\n * @api private\n */\n\nmodule.exports = function parseLinkLabel(state, start) {\n  var level,\n      found,\n      marker,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos,\n      oldFlag = state.isInLabel;\n\n  if (state.isInLabel) {\n    return -1;\n  }\n\n  if (state.labelUnmatchedScopes) {\n    state.labelUnmatchedScopes--;\n    return -1;\n  }\n\n  state.pos = start + 1;\n  state.isInLabel = true;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n\n    if (marker === 0x5B\n    /* [ */\n    ) {\n        level++;\n      } else if (marker === 0x5D\n    /* ] */\n    ) {\n        level--;\n\n        if (level === 0) {\n          found = true;\n          break;\n        }\n      }\n\n    state.parser.skipToken(state);\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n    state.labelUnmatchedScopes = 0;\n  } else {\n    state.labelUnmatchedScopes = level - 1;\n  } // restore old state\n\n\n  state.pos = oldPos;\n  state.isInLabel = oldFlag;\n  return labelEnd;\n};","map":{"version":3,"sources":["/Users/blackhat/TV Shows/Meeting Room/src/frontend/node_modules/remarkable/lib/helpers/parse_link_label.js"],"names":["module","exports","parseLinkLabel","state","start","level","found","marker","labelEnd","max","posMax","oldPos","pos","oldFlag","isInLabel","labelUnmatchedScopes","src","charCodeAt","parser","skipToken"],"mappings":"AAAA;AAEA;;;;;;;;;;;AAWAA,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,KAA/B,EAAsC;AACrD,MAAIC,KAAJ;AAAA,MAAWC,KAAX;AAAA,MAAkBC,MAAlB;AAAA,MACIC,QAAQ,GAAG,CAAC,CADhB;AAAA,MAEIC,GAAG,GAAGN,KAAK,CAACO,MAFhB;AAAA,MAGIC,MAAM,GAAGR,KAAK,CAACS,GAHnB;AAAA,MAIIC,OAAO,GAAGV,KAAK,CAACW,SAJpB;;AAMA,MAAIX,KAAK,CAACW,SAAV,EAAqB;AAAE,WAAO,CAAC,CAAR;AAAY;;AAEnC,MAAIX,KAAK,CAACY,oBAAV,EAAgC;AAC9BZ,IAAAA,KAAK,CAACY,oBAAN;AACA,WAAO,CAAC,CAAR;AACD;;AAEDZ,EAAAA,KAAK,CAACS,GAAN,GAAYR,KAAK,GAAG,CAApB;AACAD,EAAAA,KAAK,CAACW,SAAN,GAAkB,IAAlB;AACAT,EAAAA,KAAK,GAAG,CAAR;;AAEA,SAAOF,KAAK,CAACS,GAAN,GAAYH,GAAnB,EAAwB;AACtBF,IAAAA,MAAM,GAAGJ,KAAK,CAACa,GAAN,CAAUC,UAAV,CAAqBd,KAAK,CAACS,GAA3B,CAAT;;AACA,QAAIL,MAAM,KAAK;AAAK;AAApB,MAA6B;AAC3BF,QAAAA,KAAK;AACN,OAFD,MAEO,IAAIE,MAAM,KAAK;AAAK;AAApB,MAA6B;AAClCF,QAAAA,KAAK;;AACL,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACfC,UAAAA,KAAK,GAAG,IAAR;AACA;AACD;AACF;;AAEDH,IAAAA,KAAK,CAACe,MAAN,CAAaC,SAAb,CAAuBhB,KAAvB;AACD;;AAED,MAAIG,KAAJ,EAAW;AACTE,IAAAA,QAAQ,GAAGL,KAAK,CAACS,GAAjB;AACAT,IAAAA,KAAK,CAACY,oBAAN,GAA6B,CAA7B;AACD,GAHD,MAGO;AACLZ,IAAAA,KAAK,CAACY,oBAAN,GAA6BV,KAAK,GAAG,CAArC;AACD,GAtCoD,CAwCrD;;;AACAF,EAAAA,KAAK,CAACS,GAAN,GAAYD,MAAZ;AACAR,EAAAA,KAAK,CAACW,SAAN,GAAkBD,OAAlB;AAEA,SAAOL,QAAP;AACD,CA7CD","sourcesContent":["'use strict';\n\n/**\n * Parse link labels\n *\n * This function assumes that first character (`[`) already matches;\n * returns the end of the label.\n *\n * @param  {Object} state\n * @param  {Number} start\n * @api private\n */\n\nmodule.exports = function parseLinkLabel(state, start) {\n  var level, found, marker,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos,\n      oldFlag = state.isInLabel;\n\n  if (state.isInLabel) { return -1; }\n\n  if (state.labelUnmatchedScopes) {\n    state.labelUnmatchedScopes--;\n    return -1;\n  }\n\n  state.pos = start + 1;\n  state.isInLabel = true;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5B /* [ */) {\n      level++;\n    } else if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    state.parser.skipToken(state);\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n    state.labelUnmatchedScopes = 0;\n  } else {\n    state.labelUnmatchedScopes = level - 1;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n  state.isInLabel = oldFlag;\n\n  return labelEnd;\n};\n"]},"metadata":{},"sourceType":"script"}